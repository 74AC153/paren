add onload()/onexit() callbacks for shared libs
figure out how to do file loading
 - add support for mapping in files & reading contents?
 - add support to parse / eval buffer?
 - add fdstream?
implement tokenizer/parser in script?
split out "free memory" tracking from memory module
add signature & finalizer to handle type?
add 'c' character and 'asdf' composite character shorthand to tokenizer?
test continuations more
add bootstrap program to paren, then call parse-file and eval on each one
add (load ...) / (load-graph ...) .. ?
  - _map-file
  - _parse-buf
expand on readme
 - foreign function interface
 - making library modules
add pre-parse functionality -- embedable into sharred libs

remove C lib deps from core?

add (eval ... ) builtin

when returning error, must make sure we still lock/unlock returned value?
eval error for:
<uninitialized memory>
-- too many arguments to function


when building with -m32, get errors like:
	locals->restart = (void*) node_value(node_cons_car(temp));
	warning: cast to pointer from integer of different size

mode MK_CONT into later CONS func evaluation

restrict node dat field to be sizeof(void *arr[2])
define foreign function calling convention

specials:
if_func
lambda_func
quote_func
mk_cont_func
defbang_func
setbang_func

builtins:
atom?
car
cdr
cons
eq?
makesym
splitsym
defined?


determine memory locking policy for:
in
env_handle
result
-- in and env_handle passed into function pre-locked, when do we know we can safely unlock?
-- result -- should we always lock and leave it to returning function to determine what to do?


env:
must be restored when re-starting a continuation, but not necessariiy clobber original calling environment
but must also retain passed environment if eval modifies it.

shallow call: no lambdas in call stack
deep call: lambda in call stack inserting stack frame
if "shallow" -- env may be updated
if "deep" -- env may be retained?

lambda form tracks parent environment
lambda_bind then adds child environment
recursive eval needs to track ref to "parent" environment
in shallow calls, ref to parent env is just 'env' input arg
in deeper calls, ref to parent env is ref to env returned from lambda_bind
  --> ref to parent env is ref to location in parent bt frame
at entry, save env into locals

before restarting for recursive eval, save env_ref in bt and create env_ref in locals pointing to env returned from lambda_bind
when restarting after recursive eval, restore env_ref from saved env bt frame

env_ref must point to mem that won't get clobbered between restarts
  --> need a handle node to hold env ptr?
  --> handle allocated & locked when environ_push is called
  --> handle unlocked when environ_popframe is called





defined? cons? symbol? value? foreign?
remove single quote shorthand?
move existing 'builtins' into eval, i.e. create special node types, etc
add theory of operation in various source files
find ways to reduce memory use:
- split lambda into two nodes
- move locked flag into high bit of refcount
- reduce MAX_SYM_LEN
add non-global memory state to node layer
implement block allocator
Use quote special form to your advantage to eval arguments before passing to foreign functions. Once this is done, assert that inputs to eval are locked instead of just hoping so.

continuations -- make eval totally non-recursive laying breadcrumbs?
--> when executing call/cc, pass continuation object to function arg, and return value from function arg
--> when executing continuation object, set returned value from that place in eval tree to passed value to continuation object
write a REPL and test harness
macros -- rewrite parser in scheme
remote eval -- pending

test
test
test


Lexical scope
when creating a lambda function, must also have 'defining environment' so that bound variables at the time of instantiation can be accessed. i.e. lambda forms must have:
  - ptr to actual function expression to be evaluated
  - ptr to variable names that are to be bound when a call is made
  - ptr to environment at the time of the lambda definition

when function calls are made, both name->argument bindings for the subroutine environment as well as the parent environment (at time of subroutine definition) are passed.

Tail call elimination must then take into account defining environment, but can
still dispose "current" environment when (re)starting a function.

When a subroutine is invoked, then, the environment stack is actually a mixture of 'definition environments' and 'function call stack' environments: at each node in the function call stack, there is a pointer to the definition environment, as well as a pointer to the variable binding environments.


tail call elimination
-- requires rewrite of eval to be non-recursive
call/cc?


add unit tests for parse and eval:

parse tests:
()
a
(())
(a)
(a ())
(() a)
(a . ())
(() . a)

(a b)
(b a)
(a . b)
(b . a)

(a b . c)

(a (b))
((b) a)
(a . (b))
((b) . a)

((a) (b))
((b) (a))
((a) . (b))
((b) . (a))

eval tests:
()
a
1
(a . b)

(quote ())
(quote 1)
(quote a)
(quote (a . b))

(def! W)
(def! X)
(def! Y)
(def! Z)

(set! W (quote ()))
(set! X (quote a))
(set! Y (quote 1))
(set! W (quote (a . b)))

(atom W)
(atom X)
(atom Y)
(atom Z)

(car W)
(car X)
(car Y)
(car Z)

(cdr W)
(cdr X)
(cdr Y)
(cdr Z)


(if () (quote a) (quote b))
(if a (quote a) (quote b))
(if 1 (quote a) (quote b))
(if (quote ()) (quote a) (quote b))
(if (quote a) (quote a) (quote b))
(if (quote 1) (quote a) (quote b))
(if (quote (a . b)) (quote a) (quote b))

(lambda () a)
(lambda a a)
(lambda (a) a)
(lambda (a . b) (a b))



cons

eq
defbang
setbang

(quote ())
(eq () (quote ()))
(eq () (quote (())))
(lambda (x) (car x))

(lambda () 9)
(label foo (lambda () 9))

(label next (lambda (x) (car (cdr x))))

(label my_car (lambda (x) (car x)))
(my_car (quote (a b)))

test lexical scope:
(label myfun (lambda () (label x 5)
                        (label five (lambda () x))
                        (label x 6)
                        (five)
             )
)

(label myfun (lambda () (label x 5) (label five (lambda () x)) (label x 6) (five)))

((lambda (a . b) (cons a (cons a ()))) 1 2 3)

(def! last-item-rec)
(set! last-item-rec (lambda (first rest)
                        (if (eq rest ())
                            first
                            (last-item-rec (car rest) (cdr rest)))))

(set! last-item-rec (lambda (first rest) (if (eq rest ()) first (last-item-rec (car rest) (cdr rest)))))

(def! last-item)
(set! last-item (lambda (l) (last-item-rec (car l) (cdr l))))
(last-item '(a b c))

(def! reverse ())
(set! reverse (lambda (fwd rev) (if (eq fwd ()) rev (reverse (cdr fwd) (cons (car fwd) rev)))))
(reverse (quote (1 2 3)) ())


add operators:

nil?
atom?
list?
value?
symbol?
lambda?
...

+
-
*
/
%

<<
>>
->>
|
&
^
~

<
>
<=
>=
!=

&&
||
!

add string tokenizer pass
add quote parse pass

variadic functions?:
(lambda (foo &rest bar)) ?
(lambda all-args all-args) and (lambda (first-arg second-arg . other-args) ?

macros


reduce number of retain/releases by using _noref more often

move builtins into evaluator?

create native builtin node types?

switch to slist to reduce code size

replace cond with not-nil?

add let builtin to push environment

distributed multithreaded, send on request when crossing address spaces
- "hypernodes" represent cross-space links
- need to work out serialization method

make it so parse doesn't consume entire string if there are multiple lists in input string
remove dead node type

